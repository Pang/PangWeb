@using PangWeb.Services
@using PangWeb.Shared.DTOs
@using Microsoft.AspNetCore.Components
@inject IJSRuntime jsr

<section class="container">
    <h3>Login</h3>
    <EditForm Model="@UserForm" OnValidSubmit="@LoginUser">
        <div class="form-group row w-50 mx-0">
            <InputText  placeholder="Email" @bind-Value="@UserForm.Email"></InputText><br/>
        </div>

        <div class="form-group row w-100 mt-1 mx-0">
            <InputText type="password" placeholder="Password" @bind-Value="@UserForm.Password"></InputText> <br />
        </div>

        <div style="display: flex; justify-content: space-between">
            <button class="btn btn-success d-grid mt-2" type="submit">Submit</button>
            @if (!fakeUserBtnUsed)
            {
                <button id="fakeUserBtn" 
                    class="btn btn-info mt-2" 
                    type="button" 
                    @onclick="RegisterFakeUser" 
                >
                    Create Fake User
                </button> 
            }
        </div>
    </EditForm>
</section>

@code {
    [Parameter]
    public EventCallback<bool> OnLoggedIn { get; set; }

    [Inject]
    private UserService _userService { get; set; }
    public UserLoginDto UserForm = new ();
    private bool fakeUserBtnUsed { get; set; }

    protected override void OnInitialized()
    {
        fakeUserBtnUsed = _userService.GetTokenProperty("email") != null;
    }

    private async void LoginUser()
    {
        var token = await _userService.LoginUser(UserForm);
        await jsr.InvokeAsync<string>("localStorage.setItem", "token", token).ConfigureAwait(false);
        _userService.HandleToken(token);
        await OnLoggedIn.InvokeAsync();
    }

    private async void RegisterFakeUser()
    {
        UserRegisterDto UserForm = new UserRegisterDto()
            {
                Email = "fake@user.com",
                Password = "abc",
                Forename = "Fake",
                Surname = "User",
            };

        await _userService.RegisterUser(UserForm);
        fakeUserBtnUsed = true;

        UserLoginDto userLogin = new UserLoginDto()
            {
                Email = "fake@user.com",
                Password = "abc"
            };

        var token = await _userService.LoginUser(userLogin);
        await jsr.InvokeAsync<string>("localStorage.setItem", "token", token).ConfigureAwait(false);
        _userService.HandleToken(token);
        await OnLoggedIn.InvokeAsync();

        StateHasChanged();
    }
}
